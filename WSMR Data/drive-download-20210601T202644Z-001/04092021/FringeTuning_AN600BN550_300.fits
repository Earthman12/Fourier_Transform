# -*- coding: utf-8 -*-
"""
Created on Fri Apr  9 16:43:49 2021

@author: Ricky
"""

#FOURIER TRANSFORM CODE

def subAverage(image):

    print("SUBTRACTING AVERAGE VALUE FROM IMAGE...")

    subAverageImage = np.zeros(shape = (len(image), len(image[0])))
    averageVal = np.median(image)

    for i in range(0, len(subAverageImage), 1):
        for j in range(0, len(subAverageImage[0]), 1):
            subAverageImage[i][j] = image[i][j] - averageVal

    return subAverageImage

##############################################################################

def HanningWindow(image):

    print("APPLYING HANNING WINDOW...")

    #   Creates the 2d Hanning window
    hann1 = np.hanning(len(image))
    hann2 = np.hanning(len(image[0]))
    hann2d = np.sqrt(np.outer(hann1, hann2))
    hannWin = hann2d * image

    return hannWin

##############################################################################

def FourierTransform(image):

    print("FOURIER TRANSFORMING...")

    #   Fourier Transforming
    f = np.fft.fft2(image)
    #   Shifting zero frequency component to center spectrum
    fshift = np.fft.fftshift(f)

    powerSpectrum = (np.abs(fshift) ** 2)

    #   Visual representation of Fourier Transform
    fourierImage = np.log10(powerSpectrum)

    return fourierImage

##############################################################################

def WavelengthFinder(transform):

    print("SEARCHING FOR ROW WITH BRIGHTEST PIXEL IN FOURTH QUADRANT...")

    #   Searching for brightest pixel in 4th quadrant of transform
    startX = len(transform[0]) / 2 #X center
    endX = len(transform[0]) #right end
    startY = 0                  #bottom
    endY = len(transform) / 2 - 1 #Y center - 1
    startX = int(startX) #Values set to floats in call above, must be integers
    endY = int(endY)
    highestPixel = 0
    yRow = 0

    for i in range(startX, endX, 1):
        for j in range(startY, endY, 1):
            if(transform[j][i] > highestPixel):
                highestPixel = transform[j][i]
                yRow = j

    print("Brightest pixel in fourth quadrant of transform located in row:", yRow)

    #   Values from bright pixel row are stored in seperate array after taking
    #   the absolute value of each value in row and its corresponding value
    #   above and below, squaring them, and then adding them together into
    #   the seperate array
    addedValuesArray = np.zeros(shape = len(transform[yRow]))

    for i in range(0, len(addedValuesArray), 1):
        #   TAKE ABSOLUTE VALUE OF TOP, MID, & BOTTOM
        absTop = abs(transform[yRow + 1][i])
        absMid = abs(transform[yRow][i])
        absBot = abs(transform[yRow - 1][i])
        #   SQUARE TOP, MID, & BOTTOM
        squareTop = absTop * absTop
        squareMid = absMid * absMid
        squareBot = absBot * absBot
        #   ADD THEM TOGETHER
        addedValuesArray[i] = squareTop + squareMid + squareBot

    return addedValuesArray

##############################################################################

def displayImage(image, title):

    if (title == "Median Filtered Image"):#Median filter has log norm
        plt.imshow(image, origin='lower', cmap='gray',  norm = LogNorm())
        plt.title(title)
        plt.xlabel("Pixel No.")
        plt.ylabel("Pixel No.")
        plt.show(block=True)

    else:
        plt.imshow(image, origin='lower', cmap='gray', vmin = np.min(image), vmax = np.max(image))
        plt.title(title)
        plt.xlabel("Pixel No.")
        plt.ylabel("Pixel No.")
        plt.show(block=True)

##############################################################################

#                           DRIVER CODE
#   Displays fits image, cuts out section with the interferogram, and fourier transforms
import numpy as np
import matplotlib.pyplot as plt
import scipy.ndimage as ndi
import os
from matplotlib.colors import LogNorm
from astropy.io import fits
from tkinter.filedialog import askopenfilename
from tkinter import Tk

Tk().withdraw()

#   Opens up file explorer to select the file
filePath = askopenfilename()
fileName = os.path.basename(filePath)
print("File Name:",fileName)

#   Opening fits file. Returns Header Data Unit(HDU) List (hdul: header and data array/table)
hdul = fits.open(filePath)

#   Primary HDU
primHDU = hdul[0]
imageArray = primHDU.data[:,:]

#   Displays Fits Image
displayImage(imageArray, ("Original " + fileName + " Image"))
print(len(imageArray[0]), "values in the X axis")
print(len(imageArray), "values in the Y axis")

#   Median filtered image
print("APPLYING MEDIAN FILTER...")
medianImage = ndi.median_filter(imageArray, size = 1)
displayImage(medianImage, "Median Filtered Image")

#   Finding average value and subtracting it from each value
subAverageImage = subAverage(medianImage)
displayImage(subAverageImage, "Average Value Subtracted")

#   Applying Hanning window
hanningWindow = HanningWindow(subAverageImage)
displayImage(hanningWindow, "Hanning Window Output")

#   Fourier transforming
fourierTransformImage = FourierTransform(hanningWindow)
displayImage(fourierTransformImage, "Fourier Image")

#   Take row cut of bright pixel in transform image and plot intensity as
#   function of x
rowValues = WavelengthFinder(fourierTransformImage)
minRow = np.min(rowValues)
maxRow = np.max(rowValues)
print("Minimum value in plot: ", minRow)
print("Maximum value in plot: ", maxRow)
plt.plot(rowValues)
plt.ylim(minRow, maxRow)
plt.title("Row Values Plotted")

#   Closing file
hdul.close()

print ("End of program")